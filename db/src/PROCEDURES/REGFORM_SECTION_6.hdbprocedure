PROCEDURE "REGFORM_SECTION_6" (
    IN IN_REQUEST_NO BIGINT,
	IN IN_STEP_NO INTEGER,
	IN IN_ENTITY_CODE NVARCHAR(10),
	IN IN_USER_ID NVARCHAR(100),
	IN IS_RESEND NVARCHAR(5),
	IN IN_STATUS INTEGER,

    -- IN ST_MAIN "ST_REQUEST_INFO",
	-- IN ST_ADDRESS "ST_REGFORM_ADDRESS",
	-- IN ST_CONTACTS "ST_REGFORM_CONTACTS",
	
	-- IN ST_PAYMENT "ST_REGFORM_BANKS",
	-- IN ST_FINANCE "ST_REGFORM_FINANCIAL",
	-- IN ST_OWNER "ST_REGFORM_OWNERS",
	
	-- IN ST_PROD_SERV "ST_REGFORM_PRODUCT_SERVICE",
	-- IN ST_CAPACITY "ST_REGFORM_CAPACITY",
	-- IN ST_CUSTOMER "ST_REGFORM_CUSTOMERS",
	-- IN ST_OEM "ST_REGFORM_OEM",
	
    -- IN ST_DISC_FIELDS "ST_REGFORM_DISCLOSURE_FIELDS",
    -- IN ST_DISC_RELATIVES "ST_REGFORM_DISCLOSURE_RELATIVES",
    -- IN ST_DISC_QACERT "ST_REGFORM_DISCLOSURE_QACERT",
	
	-- IN ST_ATTACH_FIELDS "ST_REGFORM_ATTACH_FIELDS",
    -- IN ST_ATTACH "ST_REGFORM_ATTACHMENTS",

    IN ST_EVENTS "ST_REQUEST_EVENTS_LOG",
	
	OUT OUT_SUCCESS NVARCHAR(100),
	OUT OUT_ERROR_CODE BIGINT,
	OUT OUT_ERROR_MESSAGE VARCHAR(1000),
    OUT OUT_EMAIL_TO NVARCHAR(100)
)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
   AS
BEGIN

   /*************************************
       Write your procedure logic 
   *************************************/
   -- Local Variables:
   DECLARE LV_CURR_TIMESTAMP TIMESTAMP;
   DECLARE LV_CURR_DATE TIMESTAMP;
   DECLARE LV_COUNT INTEGER;
   DECLARE LV_SAVED_AS_DRAFT NVARCHAR(1);
   DECLARE LV_STATUS INTEGER;
   DECLARE LV_MESSAGE NVARCHAR(150);
	--Opentext Values
	DECLARE LV_IVEN_VENDOR_CODE INTEGER;
	DECLARE LV_OT_COUNT INTEGER;
	DECLARE LV_OT_PARENT_ID NVARCHAR(25);
	DECLARE LV_OT_FOLDER1_ID NVARCHAR(25);
	DECLARE LV_OT_FOLDER2_ID NVARCHAR(25);
    -- Event Values
	DECLARE LV_EVENT_COUNT INTEGER;
	DECLARE LV_EVENT_NO INTEGER;
	DECLARE LV_EVENT_CODE INTEGER;
	DECLARE LV_REMARK NVARCHAR(100);
	-- Next Approver details
	DECLARE LV_NXT_APPROVER_ID NVARCHAR(100);
	DECLARE LV_NXT_APPROVER_ROLE NVARCHAR(50);
	DECLARE LV_NXT_APPROVER_LEVEL INTEGER;
	
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
    SELECT ::SQL_ERROR_CODE, ::SQL_ERROR_MESSAGE INTO OUT_ERROR_CODE,OUT_ERROR_MESSAGE FROM DUMMY;
    OUT_ERROR_CODE := null;
    OUT_ERROR_MESSAGE := null;
    	 
    OUT_SUCCESS := null;
    OUT_EMAIL_TO := null;
    
    -- Local Variable values assigning
    SELECT CURRENT_TIMESTAMP INTO LV_CURR_TIMESTAMP FROM DUMMY;
    SELECT CURRENT_DATE INTO LV_CURR_DATE FROM DUMMY;
    
    
    -- Section 6 - Submission Page--------------------------------------------------------------------
	IF :IN_STEP_NO = 6 AND (:IN_STATUS = 4 OR :IN_STATUS = 7)
    THEN

        -- Get Count for new EVENT_NO
	SELECT COUNT(*) into LV_EVENT_COUNT FROM "VENDOR_PORTAL_REQUEST_EVENTS_LOG" 
	WHERE "REQUEST_NO" = :IN_REQUEST_NO;
	
	LV_EVENT_NO := LV_EVENT_COUNT + 1;
	
	
    -- Generate status, event code & remarks based on status
	IF :IN_STATUS = 4 AND :IS_RESEND IS NULL --In Progress
	THEN
        LV_STATUS := 6; -- Status - In Approval - SMDM
        LV_EVENT_CODE := 4; -- Event- OB Form Submitted
        LV_REMARK := 'Form submitted by - ' || :IN_USER_ID;
        
        LV_MESSAGE := 'Registration Form Submitted for Request: '  || :IN_REQUEST_NO || '. Your form will be forwarded to Procurement Team for verification.';
        
    ELSEIF :IN_STATUS = 4 AND :IS_RESEND = 'X' --Sent Back
    THEN
        LV_STATUS := 9; -- -- Status - Form Resent
        LV_EVENT_CODE := 8; -- Event - OB Request Resent
        LV_REMARK := 'Form resent by - ' || :IN_USER_ID;
        
        LV_MESSAGE := 'Registration Form Resubmitted for Request: '  || :IN_REQUEST_NO || '. Your form will be forwarded to Procurement Team for verification.';
        
	END IF;
	
	
	LV_NXT_APPROVER_LEVEL := 2; -- PM
	IS_RESEND := null;
	
    LV_NXT_APPROVER_ROLE := null;
-- 	LV_NXT_APPROVER_ID := :IN_BUYER_ID
	
	
	-- Get PM/SMDM from Registration Matrix---------------------
        SELECT "USER_ROLE", "USER_ID" 
		INTO LV_NXT_APPROVER_ROLE, LV_NXT_APPROVER_ID 
		FROM "VENDOR_PORTAL_MATRIX_REGISTRATION_APPR" 
		WHERE "APPROVER_LEVEL" = :LV_NXT_APPROVER_LEVEL AND "ENTITY_CODE" = :IN_ENTITY_CODE;
	
    	SELECT COUNT(*)
            INTO LV_COUNT 
    	    FROM "VENDOR_PORTAL_USER_DELEGATION"
    	    WHERE "STATUS" = 'A' AND "ASSIGN_FROM" = :LV_NXT_APPROVER_ID AND "DEL_TO_DATE" >= :LV_CURR_DATE AND "DEL_FROM_DATE" <= :LV_CURR_DATE;
    	    
        IF :LV_COUNT != 0
    	    THEN
    	    -- LV_NXT_APPROVER_ROLE := null;
    	    
    	    SELECT "ASSIGN_TO" 
            INTO LV_NXT_APPROVER_ID 
    	    FROM "VENDOR_PORTAL_USER_DELEGATION"
    	    WHERE "STATUS" = 'A' AND "ASSIGN_FROM" = :LV_NXT_APPROVER_ID AND "DEL_TO_DATE" >= :LV_CURR_DATE AND "DEL_FROM_DATE" <= :LV_CURR_DATE;
        END IF;
    ------------------------------------------------------------
    
    -- 15) Update Main Table
    -- UPDATE "VENDOR_PORTAL_REQUEST_INFO"
    -- SET 
    -- "STATUS" = :LV_STATUS,
    -- "APPROVER_LEVEL" = :LV_NXT_APPROVER_LEVEL,
    -- "APPROVER_ROLE" = :LV_NXT_APPROVER_ROLE,
    -- "NEXT_APPROVER" = :LV_NXT_APPROVER_ID
    -- WHERE "REQUEST_NO" = :IN_REQUEST_NO;
		

    -- 16) Insert into Events Log:	
    INSERT INTO "VENDOR_PORTAL_REQUEST_EVENTS_LOG" 
    (
        "REQUEST_NO", "EVENT_NO", "EVENT_CODE", "USER_ID", "USER_NAME", "REMARK", "COMMENT", "EVENT_TYPE", "CREATED_ON"
    )
    SELECT :IN_REQUEST_NO, :LV_EVENT_NO, :LV_EVENT_CODE, "USER_ID", "USER_NAME", :LV_REMARK, "COMMENT", "EVENT_TYPE", :LV_CURR_TIMESTAMP
    FROM :ST_EVENTS;
    
    OUT_SUCCESS := :LV_MESSAGE;
    OUT_EMAIL_TO := LV_NXT_APPROVER_ID;  -- PM/SMDM as next approver
    COMMIT;	
            
    END IF;
	
END