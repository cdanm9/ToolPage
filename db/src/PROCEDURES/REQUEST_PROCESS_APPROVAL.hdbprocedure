PROCEDURE "REQUEST_PROCESS_APPROVAL" (
    IN IN_ACTION VARCHAR(50),
	IN IN_REQUEST_NO INTEGER,
    IN IN_SUPPLIER_TYPE VARCHAR(50),
    IN IN_REQUEST_TYPE INTEGER,
    IN IN_REGISTERED_ID VARCHAR(100),
	IN IN_IVEN_VENDOR_CODE BIGINT,
	IN IN_SAP_VENDOR_CODE VARCHAR(10),     
	IN IN_REQNO_ACTIVE BIGINT,
	IN IN_REQTYPE_ACTIVE INTEGER,
	IN IN_CREATION_TYPE INTEGER,
	IN IN_STATUS INTEGER,
	IN ST_REQUEST_EVENTS_LOG "ST_REQUEST_EVENTS_LOG",	

	OUT OUT_SUCCESS VARCHAR(100),
	OUT OUT_NEXT_APPROVER VARCHAR(100),
	OUT OUT_APPROVER_LEVEL INTEGER,
	OUT OUT_APPROVER_ROLE VARCHAR(10),
	OUT OUT_ERROR_CODE BIGINT,
	OUT OUT_ERROR_MESSAGE VARCHAR(1000) 
) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER
	--DEFAULT SCHEMA <default_schema_name>
	AS
BEGIN

	-- Local Variables:
	DECLARE LV_EVENT_COUNT NVARCHAR(50);
	DECLARE LV_EVENT_NO INTEGER;
	DECLARE LV_EVENT_CODE INTEGER;
	DECLARE LV_CURR_TIMESTAMP TIMESTAMP;
	DECLARE LV_OUT_SUCCESS VARCHAR(100);
	DECLARE LV_SUCCESS_ACTION VARCHAR(50);
	DECLARE LV_STATUS VARCHAR(50);

	DECLARE LV_NXT_APPROVER_ID NVARCHAR(100);
	DECLARE LV_NXT_APPROVER_ROLE NVARCHAR(50);
	DECLARE LV_ENTITY_CODE NVARCHAR(50);
	DECLARE LV_NXT_APPROVER_LEVEL INTEGER;
	
	-- DECLARE EXIT HANDLER FOR SQLEXCEPTION
    -- SELECT ::SQL_ERROR_CODE, ::SQL_ERROR_MESSAGE INTO OUT_ERROR_CODE,OUT_ERROR_MESSAGE FROM DUMMY;

	DECLARE EXIT HANDLER FOR SQLEXCEPTION
		RESIGNAL SET MESSAGE_TEXT = ::SQL_ERROR_MESSAGE; 
    OUT_ERROR_CODE := null;
    OUT_ERROR_MESSAGE := null;
    
	OUT_SUCCESS := null;
	LV_OUT_SUCCESS := null;
	LV_SUCCESS_ACTION := null;
	 OUT_NEXT_APPROVER:= null;
	 OUT_APPROVER_LEVEL:= null;
	 OUT_APPROVER_ROLE:= null;
	
	    SELECT CURRENT_TIMESTAMP INTO LV_CURR_TIMESTAMP FROM DUMMY;
	    
-- 		COMMIT;
		IF (:IN_ACTION = 'MID_APPROVE')
		THEN
			LV_STATUS := 15;
			LV_EVENT_CODE := 21;         
			LV_SUCCESS_ACTION := 'Approved By ';   

			SELECT "ENTITY_CODE","NEXT_APPROVER","APPROVER_LEVEL","APPROVER_ROLE" 
			INTO LV_ENTITY_CODE,LV_NXT_APPROVER_ID,LV_NXT_APPROVER_LEVEL,LV_NXT_APPROVER_ROLE   
			FROM "VENDOR_PORTAL_REQUEST_INFO"
			WHERE "REQUEST_NO" = :IN_REQUEST_NO;

			LV_SUCCESS_ACTION := 'Approved By '|| :LV_NXT_APPROVER_ROLE;      

			LV_NXT_APPROVER_LEVEL := LV_NXT_APPROVER_LEVEL + 1;
			
			SELECT "USER_ID","USER_ROLE","APPROVER_LEVEL" into LV_NXT_APPROVER_ID,LV_NXT_APPROVER_ROLE,LV_NXT_APPROVER_LEVEL FROM "VENDOR_PORTAL_MASTER_APPROVAL_HIERARCHY_FE" 
			WHERE "ENTITY_CODE" = :LV_ENTITY_CODE AND "APPROVER_LEVEL"=:LV_NXT_APPROVER_LEVEL AND "APPR_TYPE"='REQ';

			UPDATE "VENDOR_PORTAL_REQUEST_INFO"          
			SET 
			"STATUS" = :LV_STATUS,
			"IVEN_VENDOR_CODE" = :IN_IVEN_VENDOR_CODE,
			"NEXT_APPROVER" = :LV_NXT_APPROVER_ID,   
			"APPROVER_LEVEL" =:LV_NXT_APPROVER_LEVEL,
			"APPROVER_ROLE" = :LV_NXT_APPROVER_ROLE,
			"LAST_UPDATED_ON"=:LV_CURR_TIMESTAMP
			WHERE "REQUEST_NO" = :IN_REQUEST_NO;     

			OUT_NEXT_APPROVER:= :LV_NXT_APPROVER_ID;
			OUT_APPROVER_LEVEL:= :LV_NXT_APPROVER_LEVEL;
			OUT_APPROVER_ROLE:= :LV_NXT_APPROVER_ROLE;      
			LV_OUT_SUCCESS := 'Success';

		END IF;
		
		IF (:IN_ACTION = 'APPROVE') 
	    THEN
	        
    	    IF :IN_REQUEST_TYPE = 1 OR :IN_REQUEST_TYPE = 2 OR :IN_REQUEST_TYPE = 3 OR :IN_REQUEST_TYPE = 6 OR IN_IVEN_VENDOR_CODE IS NULL
    	    THEN
        	    SELECT "IVEN_VENDOR_CODE".NEXTVAL INTO IN_IVEN_VENDOR_CODE FROM DUMMY;

        	    INSERT INTO "VENDOR_PORTAL_MASTER_IVEN_SAP_VENDOR_NO" VALUES(:IN_SAP_VENDOR_CODE,:IN_IVEN_VENDOR_CODE,:IN_SUPPLIER_TYPE);
    		END IF;
    		
    	    LV_STATUS := 2;
			LV_EVENT_CODE := 2;      
    	    LV_SUCCESS_ACTION := 'Approved';       

    	    
	        INSERT INTO "VENDOR_PORTAL_REQUEST_ACTIVE_STATUS" VALUES(:IN_REQUEST_NO,null,:IN_REQUEST_TYPE, null,:IN_IVEN_VENDOR_CODE);
	    
    	    IF :IN_STATUS IS NOT null
    	    THEN
    	        CALL "SET_ACTIVE_DATA" (:IN_REQUEST_NO, :IN_REQNO_ACTIVE,:IN_REQUEST_TYPE,:IN_SAP_VENDOR_CODE, :IN_CREATION_TYPE,:IN_STATUS,:LV_OUT_SUCCESS);
    	    ELSE
                LV_OUT_SUCCESS := 'Success';          
			
			END IF;     

			UPDATE "VENDOR_PORTAL_REQUEST_INFO"
			SET 
			"STATUS" = :LV_STATUS,
			"IVEN_VENDOR_CODE" = :IN_IVEN_VENDOR_CODE,
			"NEXT_APPROVER" = null,
			"APPROVER_LEVEL" =null,
			"APPROVER_ROLE" = null,
			"LAST_UPDATED_ON"=:LV_CURR_TIMESTAMP
			WHERE "REQUEST_NO" = :IN_REQUEST_NO AND "REGISTERED_ID" = :IN_REGISTERED_ID;

			LV_OUT_SUCCESS := 'Success';
	
	    ELSEIF (:IN_ACTION = 'REJECT')
	    THEN
	        LV_STATUS := 3;
			LV_EVENT_CODE := 3;
	        LV_SUCCESS_ACTION := 'Rejected';

		ELSEIF (:IN_ACTION = 'DELETE')
		THEN
				LV_STATUS := 14;
				LV_EVENT_CODE := 20;
				LV_SUCCESS_ACTION := 'Deleted';

		END IF;
		
		IF (:LV_SUCCESS_ACTION = 'Rejected' OR :LV_SUCCESS_ACTION = 'Deleted') THEN 
			UPDATE "VENDOR_PORTAL_REQUEST_INFO"
			SET 
			"STATUS" = :LV_STATUS,
			"NEXT_APPROVER" = null,
			"APPROVER_LEVEL" =null,
			"APPROVER_ROLE" = null,
			"LAST_UPDATED_ON"=:LV_CURR_TIMESTAMP
			WHERE "REQUEST_NO" = :IN_REQUEST_NO AND "REGISTERED_ID" = :IN_REGISTERED_ID;

			LV_OUT_SUCCESS := 'Success';

		END IF;

            
		IF :LV_OUT_SUCCESS = 'Success'
	    THEN
			SELECT COUNT(*) into LV_EVENT_COUNT FROM "VENDOR_PORTAL_REQUEST_EVENTS_LOG" 
			WHERE "REQUEST_NO" = :IN_REQUEST_NO;

			LV_EVENT_NO := LV_EVENT_COUNT + 1;
			
			INSERT INTO "VENDOR_PORTAL_REQUEST_EVENTS_LOG" 
			(
				"REQUEST_NO", "EVENT_NO", "EVENT_CODE","EVENT_TYPE", "USER_ID", "USER_NAME", "REMARK", "COMMENT", "CREATED_ON"
			)
			SELECT :IN_REQUEST_NO, :LV_EVENT_NO, :LV_EVENT_CODE,"EVENT_TYPE", "USER_ID", "USER_NAME", "REMARK", "COMMENT", :LV_CURR_TIMESTAMP
			FROM :ST_REQUEST_EVENTS_LOG;

	        COMMIT;
		OUT_SUCCESS := 'Vendor Request ' || :IN_REQUEST_NO || ' ' || :LV_SUCCESS_ACTION;
        ELSE
	        OUT_SUCCESS := null;
        END IF;
END