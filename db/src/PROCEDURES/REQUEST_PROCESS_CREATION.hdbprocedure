PROCEDURE "REQUEST_PROCESS_CREATION" (
	-- IN Parameters
    IN IN_ENTITY_CODE NVARCHAR(50),
    IN IVEN_VENDOR_CODE BIGINT,
	IN ST_REQUEST_INFO "ST_REQUEST_INFO",
	IN ST_EVENTS "ST_REQUEST_EVENTS_LOG",
	IN IN_NXT_APPROVER_ID NVARCHAR(100),
	IN IN_NXT_APPROVER_LEVEL INTEGER,
	IN IN_NXT_APPROVER_ROLE NVARCHAR(10),
	
	-- OUT Parameters
	OUT OUT_SUCCESS VARCHAR(100),
	OUT OUT_ERROR_CODE BIGINT,
	OUT OUT_ERROR_MESSAGE VARCHAR(1000)
)
	LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
   AS
BEGIN

	-- Local Variables:
	DECLARE LV_REQUEST_NO BIGINT;
	DECLARE LV_EVENT_COUNT NVARCHAR(50);
	DECLARE LV_EVENT_NO INTEGER;
	DECLARE LV_COUNT INTEGER;
	-- Additional Events related variables for multiple events
	DECLARE LV_EVENT_CODE INTEGER;
	DECLARE LV_EVENT_TYPE NVARCHAR(20);
	DECLARE LV_USER_ID NVARCHAR(100);
	DECLARE LV_USER_NAME NVARCHAR(100);
	DECLARE LV_REMARK NVARCHAR(100);
	DECLARE LV_COMMENT NVARCHAR(1000);
	DECLARE LV_PROCESS_LEVEL NVARCHAR(1000);
	
	DECLARE LV_INDEX INTEGER;
	DECLARE LV_EVENTSDATA_COUNT INTEGER;
	DECLARE LV_CURR_TIMESTAMP TIMESTAMP;
	DECLARE LV_CURR_DATE TIMESTAMP;
	-- Next Approver details
-- 	DECLARE NXT_APPROVER1 NVARCHAR(100);
-- 	DECLARE NXT_APPROVER2 NVARCHAR(100);
	-- DECLARE LV_NXT_APPROVER_ID NVARCHAR(100);
	
	-- DECLARE EXIT HANDLER FOR SQLEXCEPTION
    -- SELECT ::SQL_ERROR_CODE, ::SQL_ERROR_MESSAGE INTO OUT_ERROR_CODE,OUT_ERROR_MESSAGE FROM DUMMY;

	DECLARE EXIT HANDLER FOR SQLEXCEPTION
		RESIGNAL SET MESSAGE_TEXT = ::SQL_ERROR_MESSAGE;         

    OUT_ERROR_CODE := null;
    OUT_ERROR_MESSAGE := null;
    
	OUT_SUCCESS := null;
-- 	NXT_APPROVER2 := null;
	LV_PROCESS_LEVEL:='REQ';

	-- Local Variable values assigning
	   SELECT "REQUEST_NO".NEXTVAL INTO LV_REQUEST_NO FROM DUMMY;
	   
	    SELECT CURRENT_TIMESTAMP INTO LV_CURR_TIMESTAMP FROM DUMMY;
	    
	    SELECT CURRENT_DATE INTO LV_CURR_DATE FROM DUMMY;
	   
	   	SELECT COUNT(*) into LV_EVENT_COUNT FROM "VENDOR_PORTAL_REQUEST_EVENTS_LOG" 
		WHERE "REQUEST_NO" = :LV_REQUEST_NO;
   
		
		LV_EVENT_NO := LV_EVENT_COUNT + 1;
		
		-- SELECT "USER_ID" 
    	-- INTO IN_NXT_APPROVER_ID 
	    -- FROM "VENDOR_PORTAL_MATRIX_REQUEST_APPR" 
	    -- WHERE "ENTITY_CODE" = :IN_ENTITY_CODE AND "USER_ROLE" = 'PM';
	    
	    SELECT COUNT(*)
        INTO LV_COUNT 
	    FROM "VENDOR_PORTAL_USER_DELEGATION" 
	    WHERE "STATUS" = 'A' AND "ASSIGN_FROM" = :IN_NXT_APPROVER_ID AND "DEL_TO_DATE" >= :LV_CURR_DATE AND "DEL_FROM_DATE" <= :LV_CURR_DATE;
	    
	    IF :LV_COUNT != 0
	    THEN
	    SELECT "ASSIGN_TO" 
        INTO IN_NXT_APPROVER_ID 
	    FROM "VENDOR_PORTAL_USER_DELEGATION" 
	    WHERE "STATUS" = 'A' AND "ASSIGN_FROM" = :IN_NXT_APPROVER_ID AND "DEL_TO_DATE" >= :LV_CURR_DATE AND "DEL_FROM_DATE" <= :LV_CURR_DATE;
	    END IF;
		
		INSERT INTO "VENDOR_PORTAL_REQUEST_INFO"  
		(
			"REQUEST_NO","SAP_VENDOR_CODE","IVEN_VENDOR_CODE","STATUS" ,"REGISTERED_ID","ENTITY_CODE","REQUEST_TYPE" ,
			"CREATION_TYPE" ,"VENDOR_NAME1","VENDOR_NAME2","VENDOR_CODE","APPROVER_LEVEL" ,"APPROVER_ROLE",
			"REQUESTER_ID","SUPPL_TYPE","SUPPL_TYPE_DESC","BP_TYPE_CODE","BP_TYPE_DESC","REQUEST_RESENT","MDG_CR_NO","LAST_ACTIVE_REQ_NO" ,
			"SECONDARY_EMAILS_ID","WEBSITE","LEGAL_STRUCTURE","LEGAL_STRUCTURE_OTHER","ESTAB_YEAR",
			"NO_OF_EMP","NO_OF_ENGG","NO_OF_QUALITY","NO_OF_PROD","NO_OF_ADMIN","NO_OF_OTHERS",
			"BUSINESS_TYPE","TRADE_LIC_NO","TRADE_LIC_NO_DATE","VAT_REG_NUMBER","VAT_REG_DATE",
			"SUPPL_CATEGORY","SUPPL_CATEGORY_DESC","ACTIVITY_TYPE","ORDER_SIZE_MIN","ORDER_SIZE_MAX","TOTAL_PROD_CAPACITY",
			"LAST_SAVED_STEP" ,"COMPLETED_BY","COMPLETED_BY_POSITION","ACK_VALIDATION",
			"SUBMISSION_DATE","LAST_UPDATED_ON","OT_PARENT_ID","OT_FOLDER1_ID","OT_FOLDER2_ID","OT_FOLDER3_ID","OT_FOLDER4_ID","VAT_CHECK",
			"ICV_SCORE","ICV_DATE","ICV_CHECK","NDA_TYPE","REMINDER_COUNT","BUYER_ASSIGN_CHECK","CREATED_ON","COMMENT","LEGACY_ID","PROCESS_LEVEL"
		)
		SELECT 
		:LV_REQUEST_NO,"SAP_VENDOR_CODE",:IVEN_VENDOR_CODE,"STATUS" ,"REGISTERED_ID","ENTITY_CODE","REQUEST_TYPE" ,
		"CREATION_TYPE" ,"VENDOR_NAME1","VENDOR_NAME2","VENDOR_CODE",:IN_NXT_APPROVER_LEVEL ,:IN_NXT_APPROVER_ROLE,
		"REQUESTER_ID","SUPPL_TYPE","SUPPL_TYPE_DESC","BP_TYPE_CODE","BP_TYPE_DESC","REQUEST_RESENT","MDG_CR_NO","LAST_ACTIVE_REQ_NO" ,
		"SECONDARY_EMAILS_ID","WEBSITE","LEGAL_STRUCTURE","LEGAL_STRUCTURE_OTHER","ESTAB_YEAR",
		"NO_OF_EMP","NO_OF_ENGG","NO_OF_QUALITY","NO_OF_PROD","NO_OF_ADMIN","NO_OF_OTHERS",
		"BUSINESS_TYPE","TRADE_LIC_NO","TRADE_LIC_NO_DATE","VAT_REG_NUMBER","VAT_REG_DATE",
		"SUPPL_CATEGORY","SUPPL_CATEGORY_DESC","ACTIVITY_TYPE","ORDER_SIZE_MIN","ORDER_SIZE_MAX","TOTAL_PROD_CAPACITY",
		"LAST_SAVED_STEP" ,"COMPLETED_BY","COMPLETED_BY_POSITION","ACK_VALIDATION",
		"SUBMISSION_DATE",:LV_CURR_TIMESTAMP,"OT_PARENT_ID","OT_FOLDER1_ID","OT_FOLDER2_ID","OT_FOLDER3_ID","OT_FOLDER4_ID","VAT_CHECK",
		"ICV_SCORE","ICV_DATE","ICV_CHECK","NDA_TYPE","REMINDER_COUNT","BUYER_ASSIGN_CHECK",:LV_CURR_TIMESTAMP,"COMMENT","LEGACY_ID",:LV_PROCESS_LEVEL   

		FROM :ST_REQUEST_INFO;
		
		
		LV_INDEX := 0; -- Initial position of iteration
        SELECT COUNT(*) into LV_EVENTSDATA_COUNT FROM :ST_EVENTS; -- Last position of iteration
        
        
        
        IF :LV_EVENTSDATA_COUNT = 1
	    THEN
	        INSERT INTO "VENDOR_PORTAL_REQUEST_EVENTS_LOG" 
    		(
    			"REQUEST_NO", "EVENT_NO", "EVENT_CODE","EVENT_TYPE", "USER_ID", "USER_NAME", "REMARK", "COMMENT", "CREATED_ON"
    		)
    		SELECT 	:LV_REQUEST_NO, :LV_EVENT_NO, "EVENT_CODE","EVENT_TYPE", "USER_ID", "USER_NAME", "REMARK", "COMMENT", :LV_CURR_TIMESTAMP
    		FROM :ST_EVENTS;
    		
    	ELSEIF :LV_EVENTSDATA_COUNT > 1
    	THEN
    	    -- Start of While loop
            WHILE LV_INDEX < LV_EVENT_COUNT DO
            
            SELECT 
            "EVENT_NO", "EVENT_CODE", "EVENT_TYPE", "USER_ID", "USER_NAME", "REMARK", "COMMENT"
            INTO LV_EVENT_NO, LV_EVENT_CODE, LV_EVENT_TYPE, LV_USER_ID, LV_USER_NAME, LV_REMARK, LV_COMMENT
            FROM :ST_EVENTS 
            ORDER BY "EVENT_NO" ASC LIMIT 1 OFFSET :LV_INDEX;   
	
    	    INSERT INTO "VENDOR_PORTAL_REQUEST_EVENTS_LOG" 
    		(
    			"REQUEST_NO", "EVENT_NO", "EVENT_CODE","EVENT_TYPE", "USER_ID", "USER_NAME", "REMARK", "COMMENT", "CREATED_ON"
    		)
    		VALUES (
    		    :LV_REQUEST_NO, :LV_EVENT_NO, :LV_EVENT_CODE, :LV_EVENT_TYPE, :LV_USER_ID, :LV_USER_NAME, :LV_REMARK, :LV_COMMENT, :LV_CURR_TIMESTAMP
    		    );
    		    
        LV_INDEX := LV_INDEX + 1;
        
        END WHILE;
        -- End of While loop
        
	    END IF;
	    
               
		COMMIT;
		

	OUT_SUCCESS := :LV_REQUEST_NO;
-- 	OUT_SUCCESS := 'Supplier Request Created : '  || :LV_REQUEST_NO;
    
END