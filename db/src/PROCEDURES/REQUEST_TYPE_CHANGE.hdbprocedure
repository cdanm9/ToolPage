PROCEDURE "REQUEST_TYPE_CHANGE" (
    IN IN_REQUEST_NO BIGINT,
    IN IN_REQUEST_TYPE_TO INTEGER,
    IN IN_REQUEST_TYPE NVARCHAR(25),
    IN IN_CHANGE_TYPE NVARCHAR(25),
    IN IN_SUB_TYPE NVARCHAR(25),
    IN IN_SUB_TYPE_DESC NVARCHAR(100),
    IN IN_SUPPL_TYPE NVARCHAR(50),
    IN IN_SUPPL_TYPE_DESC NVARCHAR(100),
    -- IN ST_EVENTS "ST_REGISTERATION_EVENT_COMMENTS",
    IN ST_REQUEST_EVENTS_LOG "ST_REQUEST_EVENTS_LOG",
    
    OUT OUT_SUCCESS VARCHAR(100)
)
	LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
   AS
BEGIN
   /*************************************
       Write your procedure logic 
   *************************************/
   -- Local Variables:
	DECLARE LV_CURR_TIMESTAMP TIMESTAMP;
   -- Event Values
	DECLARE LV_EVENT_COUNT INTEGER;
	DECLARE LV_EVENT_NO INTEGER;
	DECLARE LV_EVENT_CODE INTEGER;
	DECLARE LV_REMARK NVARCHAR(50);

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
		RESIGNAL SET MESSAGE_TEXT = ::SQL_ERROR_MESSAGE; 
	
	LV_EVENT_CODE := null;
    OUT_SUCCESS := null;

    -- SELECT * FROM "VENDOR_PORTAL_REQUEST_EVENTS_LOG"    
	-- WHERE "REQUEST_NO" = 'HELLO'; 
       
   IF :IN_CHANGE_TYPE = 'RT' -- RT - Request Type change
   THEN
   
       IF :IN_REQUEST_TYPE = 'CREATE'
    	THEN
       
            UPDATE "VENDOR_PORTAL_REQUEST_INFO"
            SET 
            "REQUEST_TYPE" = :IN_REQUEST_TYPE_TO,
            "CREATION_TYPE" = :IN_REQUEST_TYPE_TO,
            "SUPPL_TYPE" = :IN_SUPPL_TYPE,
            "SUPPL_TYPE_DESC" = :IN_SUPPL_TYPE_DESC
            WHERE "REQUEST_NO" = :IN_REQUEST_NO;
            
            OUT_SUCCESS := 'Success';
        
        ELSEIF :IN_REQUEST_TYPE = 'UPDATE'
        THEN
            UPDATE "VENDOR_PORTAL_REQUEST_INFO"
            SET 
            "CREATION_TYPE" = :IN_REQUEST_TYPE_TO,
            "SUPPL_TYPE" = :IN_SUPPL_TYPE,
            "SUPPL_TYPE_DESC" = :IN_SUPPL_TYPE_DESC
            WHERE "REQUEST_NO" = :IN_REQUEST_NO;
            
            
            OUT_SUCCESS := 'Success';
            
        END IF;
        
        LV_REMARK := 'Request Type Change';
        LV_EVENT_CODE := 20;
       
            UPDATE "VENDOR_PORTAL_REQUEST_INFO"
            SET 
            "BP_TYPE_CODE" = :IN_SUB_TYPE,
            "BP_TYPE_DESC" = :IN_SUB_TYPE_DESC
            WHERE "REQUEST_NO" = :IN_REQUEST_NO;
            
            -- UPDATE "VENDOR_PORTAL_ONBOARDING_FORM"
            -- SET 
            -- "BP_TYPE_CODE" = :IN_SUB_TYPE,
            -- "BP_TYPE_DESC" = :IN_SUB_TYPE_DESC
            -- WHERE "OBR_NO" = :IN_REQUEST_NO;
            
            
            LV_REMARK := 'Sub Type Change';
            LV_EVENT_CODE := 21;
            OUT_SUCCESS := 'Success';
        
    END IF;
    
    
    IF :OUT_SUCCESS = 'Success'
    THEN
    
        -- Local Variable values assigning
        SELECT CURRENT_TIMESTAMP INTO LV_CURR_TIMESTAMP FROM DUMMY;
    
        -- Get Count for new EVENT_NO
    	SELECT COUNT(*) into LV_EVENT_COUNT FROM "VENDOR_PORTAL_REQUEST_EVENTS_LOG" 
    	WHERE "REQUEST_NO" = :IN_REQUEST_NO;
    	
    	LV_EVENT_NO := LV_EVENT_COUNT + 1;
    
        INSERT INTO "VENDOR_PORTAL_REQUEST_EVENTS_LOG" 
    	(
    		"REQUEST_NO", "EVENT_NO", "EVENT_CODE", "USER_ID", "USER_NAME", "REMARK", "COMMENT", "EVENT_TYPE", "CREATED_ON"
    	)
    	SELECT :IN_REQUEST_NO, :LV_EVENT_NO, :LV_EVENT_CODE, "USER_ID", "USER_NAME", :LV_REMARK, "COMMENT", "EVENT_TYPE", :LV_CURR_TIMESTAMP
    	FROM :ST_REQUEST_EVENTS_LOG;
        
    END IF;
    
    COMMIT;
   
   
END